<!DOCTYPE html>
<html lang="pt-BR">
<head>
      <script src="https://vlibras.gov.br/vlibras.min.js"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patty Nails</title>  
    
<link rel="icon" href="img/logo 2 preto.png">

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
</head>
<body> 
    
    {{{body}}}
</body>
<script>
  const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
const mobileMenu = document.getElementById('mobile-menu');
const searchContainer = document.querySelector('.search-container');
let isMenuOpen = false;

// Function to close the mobile menu
const closeMobileMenu = () => {
  mobileMenu.style.transform = 'translateY(-100%)';
  mobileMenu.style.marginTop = '0';
  isMenuOpen = false;
  
  // Restaura o ícone do menu
  const icon = mobileMenuToggle.querySelector('svg');
  icon.innerHTML = `
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
  `;
};

// Toggle menu when clicking the menu button
mobileMenuToggle.addEventListener('click', () => {
  isMenuOpen = !isMenuOpen;
  if (isMenuOpen) {
    mobileMenu.style.transform = 'translateY(0)';
    mobileMenu.style.marginTop = '100px';
  } else {
    mobileMenu.style.transform = 'translateY(-100%)';
    mobileMenu.style.marginTop = '0';
  }
  
  // Toggle menu icon
  const icon = mobileMenuToggle.querySelector('svg');
  if (isMenuOpen) {
    icon.innerHTML = `
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
    `;
  } else {
    icon.innerHTML = `
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
    `;
  }
});

// Close menu when clicking on mobile links
const mobileLinks = mobileMenu.querySelectorAll('a');
mobileLinks.forEach(link => {
  link.addEventListener('click', closeMobileMenu);
});

// Close menu when clicking on search container elements
const searchElements = [
  document.getElementById('searchTypeBtn'),
  document.getElementById('searchInput'),
  document.getElementById('searchBtn'),
  document.getElementById('allUsersBtn'),
  document.getElementById('searchResults'),
  document.getElementById('searchSpinner')
];

searchElements.forEach(element => {
  if (element) {
    element.addEventListener('click', (e) => {
      if (isMenuOpen) {
        e.stopPropagation(); // Prevent event bubbling
        closeMobileMenu();
      }
    });
  }
});

// Close menu when clicking anywhere in the search container
searchContainer.addEventListener('click', (e) => {
  if (isMenuOpen) {
    e.stopPropagation(); // Prevent event bubbling
    closeMobileMenu();
  }
});
// Função para verificar se está em dispositivo móvel
function isMobile() {
  return window.innerWidth < 768;
}

// Função para verificar autenticação
async function checkAuthStatus(route) {
  try {
    const response = await fetch('/auth/status', {
      method: 'GET',
      credentials: 'include' // Importante para enviar cookies
    });
    
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Erro ao verificar autenticação:', error);
    return { isAuthenticated: false, isAdmin: false };
  }
}

// Função principal para lidar com a navegação
async function handleNavigation(route) {
  try {
    const mobileSuffix = isMobile() ? '-mobile' : '';
    
    // Se for rota de login
    if (route === '/login') {
      const authStatus = await checkAuthStatus();
      
      if (authStatus.isAuthenticated) {
        // Se já estiver autenticado, redireciona baseado no tipo de usuário
        window.location.href = authStatus.isAdmin ? '/calendar' : '/agendamento';
      } else {
        // Se não estiver autenticado, vai para a página de login
        window.location.href = `/login${mobileSuffix}`;
      }
    }
    // Se for rota de profile
    else if (route === '/profile') {
      const authStatus = await checkAuthStatus();
      
      if (authStatus.isAuthenticated) {
        // Se autenticado, vai para o profile
        window.location.href = `/profile`;
      } else {
        // Se não autenticado, redireciona para login com returnTo
        const currentPath = encodeURIComponent(window.location.pathname);
        window.location.href = `/login${mobileSuffix}?returnTo=/profile`;
      }
    }
    // Para outras rotas
    else {
      window.location.href = `${route}${mobileSuffix}`;
    }
  } catch (error) {
    console.error('Erro na navegação:', error);
    // Em caso de erro, redireciona para login
    window.location.href = `/login${mobileSuffix}`;
  }
}

// Adiciona evento de redimensionamento
window.addEventListener('resize', () => {
  console.log('Is Mobile:', isMobile());
});

</script>
</html>
