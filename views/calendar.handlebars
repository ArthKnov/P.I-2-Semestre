<!DOCTYPE html>
<html lang = "pt-br">
<head>
    <meta charset = "UTF-8">
    <meta name    = "viewport" content = "width=device-width, initial-scale=1.0">
    <title>Agenda de Eventos</title>
    <script src  = "https://cdn.tailwindcss.com"></script>
    <link   href = "https://fonts.googleapis.com/css2?family=Sorts+Mill+Goudy:ital@0;1&display=swap" rel = "stylesheet" />
    <link   href = "https://cdn.jsdelivr.net/npm/fullcalendar@5.5.1/main.min.css" rel                    = "stylesheet">
    <script src  = "https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <style>
        body {
            background-color: black;
        }

        #calendar {
            max-width: 1100px;  /* Defina a largura máxima que você deseja */
            margin   : 0 auto;  /* Centraliza o calendário na tela */
        }

              /* Estilo ao passar o mouse sobre os botões */
        .fc-toolbar .btn:hover {
            background-color: rgba(255, 255, 255, 0.1);  /* Fundo escurecido */
        }

              /* Estilo para o botão ativo */
        .fc-toolbar .btn.active {
            background-color: rgb(0, 0, 0);        /* Fundo branco para o botão ativo */
            color           : rgb(255, 255, 255);  /* Texto preto */
        }

        .fc-toolbar-chunk .btn {
            background-color: transparent;         /* Fundo transparente */
            color           : rgb(255, 255, 255);  /* Texto preto */
            border          : 1px solid black;     /* Borda preta */
        }

              /* Estilo ao passar o mouse sobre os botões */
        .fc-toolbar-chunk .btn:hover {
            background-color: rgba(255, 255, 255, 0.1);  /* Fundo escurecido */
        }

              /* Estilo para o botão ativo */
        .fc-toolbar-chunk .btn.active {
            background-color: rgb(0, 0, 0);        /* Fundo branco para o botão ativo */
            color           : rgb(255, 255, 255);  /* Texto preto */
        }

              /* Botão desativado */
        .btn-disabled {
            background-color: gray;         /* Fundo cinza */
            cursor          : not-allowed;  /* Cursor não permitido */
        }
        .btn-disabled:hover {
        background-color: rgb(220, 38, 38);  /* Fundo vermelho ao passar o mouse */
    }
    </style>
</head>
<body class = "text-white font-sans">
    <!-- Navbar -->
    <nav class = "w-full flex justify-center bg-black py-4 shadow-md">
    <div class = "max-w-screen-xl w-full flex items-center justify-between h-20">
    <h1  class = "flex-1 text-white font-s">
    <img src   = "/img/logo.svg" alt = "Logo" />
            </h1>
           <button onclick = "confirmarLogout(event)" class = "px-5 py-1 bg-zinc-900 text-white rounded-xl transition-transform duration-300 transform hover:scale-105 hover:bg-zinc-800 md:text-lg">
                Logout
            </button>
        </div>
    </nav>

    <div class = "container mx-auto mt-3 p-2">
    <h1  class = "text-3xl text-center font-bold mb-6"></h1>
    <div id    = "calendar" class = "bg-zinc-800 rounded-lg p-4 shadow-lg"></div>
    </div>

    <!-- Modal para Detalhar Evento -->
    <div    class       = "modal fade" id     = "eventModal" tabindex = "-1" role               = "dialog" aria-labelledby = "eventModalLabel" aria-hidden = "true">
    <div    class       = "modal-dialog" role = "document">
    <div    class       = "modal-content bg-zinc-800 text-white">
    <div    class       = "modal-header border-b border-gray-600">
    <h5     class       = "modal-title" id    = "eventModalLabel">Detalhes do Agendamento</h5>
    <button type        = "button" class      = "close text-white" id = "closeModal" aria-label = "Close">
    <span   aria-hidden = "true">&times;</span>
                    </button>
                </div>
                <div                    class                  = "modal-body">
                <p><strong>Serviço      :</strong> <span id    = "eventTitle"></span></p>
                <p><strong>Profissional:</strong> <span id     = "eventprofessionalName"></span></p>
                <p><strong>Data         :</strong> <span id    = "eventStart"></span></p>
                <p><strong>Horário      :</strong> <span id    = "eventHora"></span></p>
                <p><strong>Agendado     por:</strong> <span id = "eventUser"></span></p>
                <p><strong>Email        :</strong> <span id    = "eventUserEmail"></span></p>
                <p><strong>Telefone     :</strong> <span id    = "eventUserPhone"></span></p>

                    <div   class = "form-group">
                    <label for   = "newEventDate" class = "text-gray-400">Nova Data:</label>
                    <input type  = "date" class         = "form-control bg-zinc-700 text-white" id = "newEventDate" required>
                    </div>
                    <div   class = "form-group mt-2">
                    <label for   = "newEventHour" class = "text-gray-400">Novo Horário:</label>
                    <input type  = "time" class         = "form-control bg-zinc-700 text-white" id = "newEventHour" required>
                    </div>
                </div>
                <div    class = "modal-footer border-t border-gray-600">
                <button type  = "button" class = "bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md btn-disabled" id = "editEvent" disabled>Editar Informações</button>
                <button type  = "button" class = "bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-md" id                = "deleteEvent">Cancelar Agendamento</button>
                </div>
            </div>
        </div>
    </div>

    <script src = "https://cdn.jsdelivr.net/npm/fullcalendar@5.5.1/main.min.js"></script>
    <script src = "https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src = "https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
<script>
function confirmarLogout(event) {
    event.preventDefault();  // Previne a ação padrão do botão
    Swal.fire({
        title             : 'Tem certeza?',
        text              : "Você deseja sair?",
        icon              : 'warning',
        showCancelButton  : true,
        confirmButtonColor: '#d33',
        cancelButtonColor : '#3085d6',
        confirmButtonText : 'Sim, sair!',
        cancelButtonText  : 'Não, cancelar'
    }).then((result) => {
        if (result.isConfirmed) {
            window.location.href = '/logout';  // Redireciona para logout
        }
    });
}

document.addEventListener('DOMContentLoaded', function () {
    var calendarEl = document.getElementById('calendar');

    var calendar = new FullCalendar.Calendar(calendarEl, {
        initialView  : 'dayGridMonth',
        headerToolbar: {
            left  : 'prev,next today',
            center: 'title',
            right : 'dayGridMonth,timeGridWeek,timeGridDay'
        },
        themeSystem: 'bootstrap',
        events     : '/events',
        eventClick : function (info) {
              // Preencher o modal com as informações do evento clicado
            document.getElementById('eventTitle').innerText            = info.event.title;
            document.getElementById('eventprofessionalName').innerText = info.event.extendedProps.professionalName || 'Desconhecido';
            document.getElementById('eventStart').innerText            = info.event.start.toLocaleDateString();
            document.getElementById('eventHora').innerText             = info.event.extendedProps.hora || 'Desconhecido';
            document.getElementById('eventUser').innerText             = info.event.extendedProps.user.nome || 'Desconhecido';
            document.getElementById('eventUserEmail').innerText        = info.event.extendedProps.user.email || 'N/A';
            document.getElementById('eventUserPhone').innerText        = info.event.extendedProps.user.telefone || 'N/A';

              // Definir os valores padrão da data e horário com os dados do evento
            const                   originalDate          = moment(info.event.start).format('YYYY-MM-DD');
            const                   originalHour          = moment(info.event.extendedProps.hora, 'HH:mm').format('HH:mm');
            document.getElementById('newEventDate').value = originalDate;
            document.getElementById('newEventHour').value = originalHour;

              // Desabilitar o botão de editar inicialmente
            const editButton          = document.getElementById('editEvent');
                  editButton.disabled = true;
            editButton.classList.add('btn-disabled');

              // Adicionar evento de input para verificar alterações
            document.getElementById('newEventDate').addEventListener('input', checkEditability);
            document.getElementById('newEventHour').addEventListener('input', checkEditability);

              // Exibir o modal
            $('#eventModal').modal('show');

              // Ação de deletar o evento
            document.getElementById('deleteEvent').onclick = function () {
                Swal.fire({
                    title            : 'Você tem certeza?',
                    text             : "Esta ação não pode ser desfeita!",
                    icon             : 'warning',
                    showCancelButton : true,
                    confirmButtonText: 'Sim, excluir!',
                    cancelButtonText : 'Não, cancelar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url    : `/delete-event/${info.event.id}`,
                            type   : 'DELETE',
                            success: function () {
                                  // Armazenar a mensagem de sucesso no localStorage
                                localStorage.setItem('message', 'Seu agendamento foi excluído com sucesso.');
                                  // Recarregar a página
                                location.reload();
                            },
                            error: function (xhr, status, error) {
                                Swal.fire('Erro!', 'Não foi possível excluir o evento: ' + xhr.responseText, 'error');
                            }
                        });
                    }
                });
            };

              // Função para verificar se os campos foram alterados
            function checkEditability() {
                const newDate = document.getElementById('newEventDate').value;
                const newHour = document.getElementById('newEventHour').value;

                if (newDate !== originalDate || newHour !== originalHour) {
                    editButton.disabled = false;
                    editButton.classList.remove('btn-disabled');
                } else {
                    editButton.disabled = true;
                    editButton.classList.add('btn-disabled');
                }
            }

              // Função para fechar o modal
            document.getElementById('closeModal').onclick = function () {
                $('#eventModal').modal('hide');
            };

              // Ação de editar o evento
            document.getElementById('editEvent').onclick = async function () {
                const newStart = document.getElementById('newEventDate').value;
                const newHour  = document.getElementById('newEventHour').value;

                if (newStart && newHour) {
                    const newStartDateTime = moment(`${newStart}T${newHour}`).format();

                    try {
                        const response = await fetch(`/edit-event/${info.event.id}`, {
                            method : 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                title: info.event.title,
                                start: newStartDateTime,
                            }),
                        });

                        if (response.ok) {
                              // Armazenar a mensagem de sucesso no localStorage
                            localStorage.setItem('message', 'Evento atualizado com sucesso!');
                              // Recarregar a página
                            location.reload();
                        } else {
                            throw new Error('Erro ao atualizar o evento');
                        }
                    } catch (error) {
                        console.error('Erro:', error);
                        Swal.fire(
                            'Erro!',
                            'Erro ao atualizar o evento. Verifique o console para mais detalhes.',
                            'error'
                        );
                    }
                } else {
                    Swal.fire(
                        'Atenção!',
                        'Por favor, preencha a nova data e o novo horário.',
                        'warning'
                    );
                }
            };
        }
    });

    calendar.render();

      // Exibir mensagem de sucesso após recarregar a página
    const message = localStorage.getItem('message');
    if (message) {
        Swal.fire('Sucesso!', message, 'success');
          // Remover a mensagem do localStorage após exibi-la
        localStorage.removeItem('message');
    }
});
</script>


</body>
</html> 